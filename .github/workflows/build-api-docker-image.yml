name: Build API Docker image

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - ".github/workflows/build-api-docker-image.yml"
      - "docker/api/Dockerfile"
      - "docker/api/install_requirements.txt"
      - "docker/api/binary_requirements.txt"
      - "docker/api/requirements.txt"
      - "docker/api/run_xvfb.sh"

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/blueprint-api

jobs:
  buildx:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    concurrency:
      # cancel jobs on PRs only
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: "linux/arm64"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          install: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=ref,event=pr

      - name: Login to Github Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./docker/api
          file: ./docker/api/Dockerfile
          platforms: linux/arm64
          provenance: false
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: "image"
          image-ref: "${{ steps.meta.outputs.tags }}"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-api-image-results.sarif"
          severity: "HIGH,CRITICAL"

      - name: Upload scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-api-image-results.sarif"
